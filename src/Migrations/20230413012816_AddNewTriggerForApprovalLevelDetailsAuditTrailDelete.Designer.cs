// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using workflow.Models;

namespace workflow.Migrations
{
    [DbContext(typeof(FliDbContext))]
    [Migration("20230413012816_AddNewTriggerForApprovalLevelDetailsAuditTrailDelete")]
    partial class AddNewTriggerForApprovalLevelDetailsAuditTrailDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("workflow.Models.ApprovalLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrganizationEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationEntityId")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "IX_ApprovalLevelName")
                        .IsUnique();

                    b.ToTable("ApprovalLevels");
                });

            modelBuilder.Entity("workflow.Models.ApprovalLevelDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalLevelId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 242, DateTimeKind.Local).AddTicks(1374));

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApprovalLevelId", "Sequence" }, "IX_ApprovalLevel_Sequence")
                        .IsUnique();

                    b.ToTable("ApprovalLevelDetails");
                });

            modelBuilder.Entity("workflow.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("workflow.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 79, DateTimeKind.Local).AddTicks(2852));

                    b.Property<string>("IndexPage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 82, DateTimeKind.Local).AddTicks(9853));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("BlockedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Islocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LoginAttemptsDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersLoginHistory", b =>
                {
                    b.Property<string>("VUlhid")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vULHId");

                    b.Property<DateTime>("DLogIn")
                        .HasColumnType("datetime")
                        .HasColumnName("dLogIn");

                    b.Property<DateTime?>("DLogOut")
                        .HasColumnType("datetime")
                        .HasColumnName("dLogOut");

                    b.Property<string>("NvIpaddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nvIPAddress");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("VUlhid");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsersLoginHistory");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenu", b =>
                {
                    b.Property<string>("VMenuId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuId");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 116, DateTimeKind.Local).AddTicks(1004));

                    b.Property<int>("ISerialNo")
                        .HasColumnType("int")
                        .HasColumnName("iSerialNo");

                    b.Property<bool>("IsMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 116, DateTimeKind.Local).AddTicks(2112));

                    b.Property<string>("NvFabIcon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nvFabIcon");

                    b.Property<string>("NvMenuName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nvMenuName");

                    b.Property<string>("NvPageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nvPageUrl");

                    b.Property<string>("PrefixCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("VParentMenuId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vParentMenuId");

                    b.HasKey("VMenuId");

                    b.HasIndex("VParentMenuId");

                    b.ToTable("AspNetUsersMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuControl", b =>
                {
                    b.Property<string>("MenuControlId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("VMenuId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuId");

                    b.HasKey("MenuControlId");

                    b.HasIndex("OptionId");

                    b.HasIndex("VMenuId", "OptionId")
                        .IsUnique()
                        .HasDatabaseName("IX_AspNetUsersMenuControl");

                    b.ToTable("AspNetUsersMenuControl");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermission", b =>
                {
                    b.Property<string>("VMenuPermissionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuPermissionId");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("VMenuId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuId");

                    b.HasKey("VMenuPermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("VMenuId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("IX_AspNetUsersMenuPermission");

                    b.ToTable("AspNetUsersMenuPermission");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermissionControl", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("MenuControlId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("VMenuPermissionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuPermissionId");

                    b.HasKey("Id");

                    b.HasIndex("MenuControlId");

                    b.HasIndex("VMenuPermissionId", "MenuControlId")
                        .IsUnique()
                        .HasDatabaseName("IX_AspNetUsersMenuPermissionControl");

                    b.ToTable("AspNetUsersMenuPermissionControl");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersPageVisited", b =>
                {
                    b.Property<string>("VPageVisitedId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vPageVisitedId");

                    b.Property<DateTime>("DDateVisited")
                        .HasColumnType("datetime")
                        .HasColumnName("dDateVisited");

                    b.Property<string>("NvIpaddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nvIPAddress");

                    b.Property<string>("NvPageName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nvPageName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("VPageVisitedId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsersPageVisited");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Company")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Company");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Country");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 99, DateTimeKind.Local).AddTicks(3350));

                    b.Property<string>("Department")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Department");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MiddleName");

                    b.Property<string>("Mobile")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Mobile");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 99, DateTimeKind.Local).AddTicks(4594));

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Phone");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Photo");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Position");

                    b.Property<string>("Rank")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Rank");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("AspNetUsersProfile");
                });

            modelBuilder.Entity("workflow.Models.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DeletionRemarks")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Key2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Key3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReasonOfDeletion")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transaction")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UsedApp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id", "TableName", "Key", "Date", "UserId");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("workflow.Models.AuditTrailDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("DetailId");

                    b.HasIndex("Id", "TableName", "Key", "Date", "UserId");

                    b.ToTable("AuditTrailDetails");
                });

            modelBuilder.Entity("workflow.Models.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentDetail")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 130, DateTimeKind.Local).AddTicks(5855));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OldContentDetail")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("VMenuId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuId");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("workflow.Models.ComparisonOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicableDataTypes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ApplicableFieldTypes")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TechnicalEquivalent")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TechnicalEquivalent2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("UseInMultipleTypes")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ComparisonOperatorName")
                        .IsUnique();

                    b.ToTable("ComparisonOperators");
                });

            modelBuilder.Entity("workflow.Models.GeneralField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DataType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DecimalDigit")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FieldType")
                        .HasColumnType("int");

                    b.Property<string>("LOVs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("MaxNumber")
                        .HasColumnType("int");

                    b.Property<int?>("MinLength")
                        .HasColumnType("int");

                    b.Property<int?>("MinNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("GeneralFields");
                });

            modelBuilder.Entity("workflow.Models.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 224, DateTimeKind.Local).AddTicks(4788));

                    b.Property<int?>("FixedScheduleDay")
                        .HasColumnType("int");

                    b.Property<int?>("FixedScheduleMonth")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("WithFixedSchedule")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("workflow.Models.HolidayAffectedOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 228, DateTimeKind.Local).AddTicks(6256));

                    b.Property<int>("HolidayDateId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HolidayDateId");

                    b.HasIndex("OfficeId");

                    b.ToTable("HolidayAffectedOffices");
                });

            modelBuilder.Entity("workflow.Models.HolidayDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 226, DateTimeKind.Local).AddTicks(5797));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("HolidayId")
                        .HasColumnType("int");

                    b.Property<int>("HolidayTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HolidayId");

                    b.HasIndex("HolidayTypeId");

                    b.ToTable("HolidayDates");
                });

            modelBuilder.Entity("workflow.Models.LockedRequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 166, DateTimeKind.Local).AddTicks(3408));

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("RequestTypeId", "Version");

                    b.HasIndex("User");

                    b.ToTable("LockedRequestTypes");
                });

            modelBuilder.Entity("workflow.Models.ManageViewModels.ControlViewModel", b =>
                {
                    b.Property<int>("wAdd")
                        .HasColumnType("int");

                    b.Property<int>("wDelete")
                        .HasColumnType("int");

                    b.Property<int>("wDownload")
                        .HasColumnType("int");

                    b.Property<int>("wEdit")
                        .HasColumnType("int");

                    b.Property<int>("wExtract")
                        .HasColumnType("int");

                    b.Property<int>("wFetch")
                        .HasColumnType("int");

                    b.Property<int>("wPrint")
                        .HasColumnType("int");

                    b.Property<int>("wSync")
                        .HasColumnType("int");

                    b.Property<int>("wUpload")
                        .HasColumnType("int");

                    b.ToTable("ControlViewModel");
                });

            modelBuilder.Entity("workflow.Models.Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 133, DateTimeKind.Local).AddTicks(3830));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 133, DateTimeKind.Local).AddTicks(4812));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OptionGroup")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("workflow.Models.OrganizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Hierarchy")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("WebClass")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_OrganizationEntityName")
                        .IsUnique();

                    b.ToTable("OrganizationEntities");
                });

            modelBuilder.Entity("workflow.Models.OrganizationalStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizationEntityId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationEntityId");

                    b.ToTable("OrganizationalStructures");
                });

            modelBuilder.Entity("workflow.Models.Reason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("ReasonTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReasonTypeId");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("workflow.Models.RequestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 139, DateTimeKind.Local).AddTicks(1059));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("RequestCategories");
                });

            modelBuilder.Entity("workflow.Models.RequestForm", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int>("FieldId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Editable")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int>("IsRequired")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("RequestTypeId", "Version", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("RequestForms");
                });

            modelBuilder.Entity("workflow.Models.RequestStep", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<bool>("EnableEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableSMS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsConditional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsScheduled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("TAT")
                        .HasColumnType("int");

                    b.HasKey("RequestTypeId", "Version", "StepId");

                    b.HasIndex("StepId");

                    b.ToTable("RequestSteps");
                });

            modelBuilder.Entity("workflow.Models.RequestStepAssignee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssigneeType")
                        .HasColumnType("int");

                    b.Property<int?>("Field1")
                        .HasColumnType("int");

                    b.Property<int?>("Field2")
                        .HasColumnType("int");

                    b.Property<int?>("Field3")
                        .HasColumnType("int");

                    b.Property<bool>("IsConditional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredAssigneeToExecute")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<string>("Value1")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value2")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value3")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId", "Version", "StepId");

                    b.ToTable("RequestStepAssignees");
                });

            modelBuilder.Entity("workflow.Models.RequestStepAssigneeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Assignee")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("RequestStepAssigneeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestStepAssigneeId");

                    b.ToTable("RequestStepAssigneeDetails");
                });

            modelBuilder.Entity("workflow.Models.RequestStepCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ConditionInText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeId", "Version", "StepId");

                    b.ToTable("RequestStepConditions");
                });

            modelBuilder.Entity("workflow.Models.RequestStepConditionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComparisonOperatorId")
                        .HasColumnType("int");

                    b.Property<string>("LogicalOperator")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int>("ReferenceDetail")
                        .HasColumnType("int");

                    b.Property<int>("RequestStepConditionId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComparisonOperatorId");

                    b.HasIndex("RequestStepConditionId");

                    b.HasIndex("Source");

                    b.ToTable("RequestStepConditionDetails");
                });

            modelBuilder.Entity("workflow.Models.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 146, DateTimeKind.Local).AddTicks(5014));

                    b.Property<int?>("DeletionReasonId")
                        .HasColumnType("int");

                    b.Property<string>("DeletionRemarks")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RequestCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Version2")
                        .HasColumnType("int");

                    b.HasKey("Id", "Version");

                    b.HasIndex("RequestCategoryId");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("workflow.Models.RequestTypeProcessOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Owner");

                    b.HasIndex(new[] { "RequestTypeId", "Version", "Owner" }, "IX_RequestTypeProcessOwners_RequestCategoryId_RequestTypeId_Version")
                        .IsUnique();

                    b.ToTable("RequestTypeProcessOwners");
                });

            modelBuilder.Entity("workflow.Models.RequestTypeWorkFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<int?>("NextStepId")
                        .HasColumnType("int");

                    b.Property<int?>("NextStepRequestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("NextStepVersion")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeWhenRejected")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NextStepRequestTypeId", "NextStepVersion", "NextStepId");

                    b.HasIndex("RequestTypeId", "Version", "StepId");

                    b.ToTable("RequestTypeWorkFlows");
                });

            modelBuilder.Entity("workflow.Models.RequestTypeWorkFlowParallel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParallelNo")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeWorkFlowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestTypeWorkFlowId")
                        .IsUnique();

                    b.ToTable("RequestTypeWorkFlowParallels");
                });

            modelBuilder.Entity("workflow.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VSettingGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VSettingGroup");

                    b.Property<string>("VSettingId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("VSettingId");

                    b.Property<string>("VSettingLabel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VSettingLabel");

                    b.Property<string>("VSettingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VSettingName");

                    b.Property<string>("VSettingOption")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("VSettingOption");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("workflow.Models.SqlSession", b =>
                {
                    b.Property<int>("SpId")
                        .HasColumnType("int");

                    b.ToTable("SqlSessions", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("workflow.Models.UserIPAddressPerSession", b =>
                {
                    b.Property<int>("SpId")
                        .HasColumnType("int");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("SpId");

                    b.ToTable("UserIPAddressPerSessions");
                });

            modelBuilder.Entity("workflow.Models.UserOrganizationalStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApprovalLevelDetailId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 4, 13, 9, 28, 16, 236, DateTimeKind.Local).AddTicks(7254));

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrganizationalStructureId")
                        .HasColumnType("int");

                    b.Property<int>("ReportingTo")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationalStructureId");

                    b.HasIndex(new[] { "UserId", "OrganizationalStructureId" }, "IX_User_OrganizationalStructure")
                        .IsUnique();

                    b.ToTable("UserOrganizationalStructures");
                });

            modelBuilder.Entity("workflow.Models.UserPasswordPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanChangePassword")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InitialPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InitialPasswordExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPasswordNeverExpires")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswordPolicies");
                });

            modelBuilder.Entity("workflow.Models.WorkFlowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StepTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StepTypeId");

                    b.ToTable("WorkFlowSteps");
                });

            modelBuilder.Entity("workflow.Models.WorkFlowStepType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApplyApprovalPolicyForAssignees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("WorkFlowStepTypes");
                });

            modelBuilder.Entity("workflow.Models.WorkFlowStepTypeButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionButtonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActionToNextStep")
                        .HasColumnType("bit");

                    b.Property<int>("StepTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionButtonId");

                    b.HasIndex("StepTypeId");

                    b.ToTable("WorkFlowStepTypeButtons");
                });

            modelBuilder.Entity("workflow.UserPreferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("workflow.Models.ApprovalLevel", b =>
                {
                    b.HasOne("workflow.Models.OrganizationEntity", "OrganizationEntity")
                        .WithOne("ApprovalLevel")
                        .HasForeignKey("workflow.Models.ApprovalLevel", "OrganizationEntityId")
                        .HasConstraintName("FK_OrganizationEntityApprovalLevel")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationEntity");
                });

            modelBuilder.Entity("workflow.Models.ApprovalLevelDetail", b =>
                {
                    b.HasOne("workflow.Models.ApprovalLevel", "ApprovelLevel")
                        .WithMany("ApprovalLevelDetails")
                        .HasForeignKey("ApprovalLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovelLevel");
                });

            modelBuilder.Entity("workflow.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("workflow.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("workflow.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersLoginHistory", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "IdNavigation")
                        .WithMany("AspNetUsersLoginHistory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUsersLoginHistory_AspNetUsers")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenu", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsersMenu", "VParentMenu")
                        .WithMany("InverseVParentMenu")
                        .HasForeignKey("VParentMenuId")
                        .HasConstraintName("FK_AspNetUsersMenu_AspNetUsersMenu");

                    b.Navigation("VParentMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuControl", b =>
                {
                    b.HasOne("workflow.Models.Options", "Option")
                        .WithMany("AspNetUsersMenuControl")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_AspNetUsersMenuContol_Options")
                        .IsRequired();

                    b.HasOne("workflow.Models.AspNetUsersMenu", "VMenu")
                        .WithMany("AspNetUsersMenuControl")
                        .HasForeignKey("VMenuId")
                        .HasConstraintName("FK_AspNetUsersMenuControl_AspNetUsersMenu")
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("VMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermission", b =>
                {
                    b.HasOne("workflow.Models.AspNetRoles", "IdNavigation")
                        .WithMany("AspNetUsersMenuPermission")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUsersMenuPermission_AspNetRoles")
                        .IsRequired();

                    b.HasOne("workflow.Models.AspNetUsersMenu", "VMenu")
                        .WithMany("AspNetUsersMenuPermission")
                        .HasForeignKey("VMenuId")
                        .HasConstraintName("FK_AspNetUsersMenuPermission_AspNetUsersMenu")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("VMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermissionControl", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsersMenuControl", "MenuControl")
                        .WithMany("AspNetUsersMenuPermissionControl")
                        .HasForeignKey("MenuControlId")
                        .HasConstraintName("FK_AspNetUsersMenuPermissionContol_AspNetUsersMenuControl")
                        .IsRequired();

                    b.HasOne("workflow.Models.AspNetUsersMenuPermission", "MenuPermission")
                        .WithMany("AspNetUsersMenuPermissionControl")
                        .HasForeignKey("VMenuPermissionId")
                        .HasConstraintName("FK_AspNetUsersMenuPermissionControl_AspNetUsersMenuPermission")
                        .IsRequired();

                    b.Navigation("MenuControl");

                    b.Navigation("MenuPermission");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersPageVisited", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "IdNavigation")
                        .WithMany("AspNetUsersPageVisited")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUsersPageVisited_AspNetUsers")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersProfile", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "IdNavigation")
                        .WithOne("AspNetUsersProfile")
                        .HasForeignKey("workflow.Models.AspNetUsersProfile", "Id")
                        .HasConstraintName("FK_AspNetUsersProfile_AspNetUsers")
                        .IsRequired();

                    b.HasOne("workflow.Models.Options", "Office")
                        .WithMany("UserOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("IdNavigation");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("workflow.Models.AuditTrailDetail", b =>
                {
                    b.HasOne("workflow.Models.AuditTrail", "AuditTrail")
                        .WithMany("AuditTrailDetails")
                        .HasForeignKey("Id", "TableName", "Key", "Date", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditTrail");
                });

            modelBuilder.Entity("workflow.Models.HolidayAffectedOffice", b =>
                {
                    b.HasOne("workflow.Models.HolidayDate", "HolidayDate")
                        .WithMany("HolidayAffectedOffices")
                        .HasForeignKey("HolidayDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.Options", "Office")
                        .WithMany("HolidayAffectedOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HolidayDate");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("workflow.Models.HolidayDate", b =>
                {
                    b.HasOne("workflow.Models.Holiday", "Holiday")
                        .WithMany("HolidayDates")
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.Options", "HolidayType")
                        .WithMany("HolidayDates")
                        .HasForeignKey("HolidayTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Holiday");

                    b.Navigation("HolidayType");
                });

            modelBuilder.Entity("workflow.Models.LockedRequestType", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "UserInfo")
                        .WithMany("LockedRequestTypes")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.RequestType", "RequestType")
                        .WithOne("LockedRequestType")
                        .HasForeignKey("workflow.Models.LockedRequestType", "RequestTypeId", "Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("workflow.Models.OrganizationalStructure", b =>
                {
                    b.HasOne("workflow.Models.OrganizationEntity", "OrganizationEntity")
                        .WithMany("OrganizationalStructures")
                        .HasForeignKey("OrganizationEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganizationEntity");
                });

            modelBuilder.Entity("workflow.Models.Reason", b =>
                {
                    b.HasOne("workflow.Models.Options", "ReasonType")
                        .WithMany("Reasons")
                        .HasForeignKey("ReasonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReasonType");
                });

            modelBuilder.Entity("workflow.Models.RequestForm", b =>
                {
                    b.HasOne("workflow.Models.GeneralField", "GeneralField")
                        .WithMany("RequestForms")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.RequestType", "RequestType")
                        .WithMany("RequestForms")
                        .HasForeignKey("RequestTypeId", "Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralField");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("workflow.Models.RequestStep", b =>
                {
                    b.HasOne("workflow.Models.WorkFlowStep", "WorkFlowStep")
                        .WithMany("RequestSteps")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.RequestType", "RequestType")
                        .WithMany("RequestSteps")
                        .HasForeignKey("RequestTypeId", "Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");

                    b.Navigation("WorkFlowStep");
                });

            modelBuilder.Entity("workflow.Models.RequestStepAssignee", b =>
                {
                    b.HasOne("workflow.Models.RequestStep", "RequestStep")
                        .WithMany("Assignees")
                        .HasForeignKey("RequestTypeId", "Version", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestStep");
                });

            modelBuilder.Entity("workflow.Models.RequestStepAssigneeDetail", b =>
                {
                    b.HasOne("workflow.Models.RequestStepAssignee", "RequestStepAssignee")
                        .WithMany("RequestStepAssigneeDetails")
                        .HasForeignKey("RequestStepAssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestStepAssignee");
                });

            modelBuilder.Entity("workflow.Models.RequestStepCondition", b =>
                {
                    b.HasOne("workflow.Models.RequestStep", "RequestStep")
                        .WithMany("Conditions")
                        .HasForeignKey("RequestTypeId", "Version", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestStep");
                });

            modelBuilder.Entity("workflow.Models.RequestStepConditionDetail", b =>
                {
                    b.HasOne("workflow.Models.ComparisonOperator", "ComparisonOperator")
                        .WithMany("ConditionDetails")
                        .HasForeignKey("ComparisonOperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("workflow.Models.RequestStepCondition", "ConditionHeader")
                        .WithMany("ConditionDetails")
                        .HasForeignKey("RequestStepConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.Options", "SourceInfo")
                        .WithMany("ConditionSource")
                        .HasForeignKey("Source")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComparisonOperator");

                    b.Navigation("ConditionHeader");

                    b.Navigation("SourceInfo");
                });

            modelBuilder.Entity("workflow.Models.RequestType", b =>
                {
                    b.HasOne("workflow.Models.RequestCategory", "RequestCategory")
                        .WithMany("RequestTypes")
                        .HasForeignKey("RequestCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestCategory");
                });

            modelBuilder.Entity("workflow.Models.RequestTypeProcessOwner", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("RequestTypeProcessOwners")
                        .HasForeignKey("Owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.RequestType", "RequestType")
                        .WithMany("RequestTypeProcessOwners")
                        .HasForeignKey("RequestTypeId", "Version")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.RequestTypeWorkFlow", b =>
                {
                    b.HasOne("workflow.Models.RequestStep", "NextRequestStep")
                        .WithMany("NextWorkFlows")
                        .HasForeignKey("NextStepRequestTypeId", "NextStepVersion", "NextStepId");

                    b.HasOne("workflow.Models.RequestStep", "RequestStep")
                        .WithMany("WorkFlows")
                        .HasForeignKey("RequestTypeId", "Version", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NextRequestStep");

                    b.Navigation("RequestStep");
                });

            modelBuilder.Entity("workflow.Models.RequestTypeWorkFlowParallel", b =>
                {
                    b.HasOne("workflow.Models.RequestTypeWorkFlow", "WorkFlow")
                        .WithOne("WorkFlowParallel")
                        .HasForeignKey("workflow.Models.RequestTypeWorkFlowParallel", "RequestTypeWorkFlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkFlow");
                });

            modelBuilder.Entity("workflow.Models.UserOrganizationalStructure", b =>
                {
                    b.HasOne("workflow.Models.OrganizationalStructure", "OrganizationalStructure")
                        .WithMany("UserOrganizationalStructures")
                        .HasForeignKey("OrganizationalStructureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("UserOrganizationalStructures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationalStructure");

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.UserPasswordPolicy", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("UserPasswordPolicies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.WorkFlowStep", b =>
                {
                    b.HasOne("workflow.Models.WorkFlowStepType", "StepType")
                        .WithMany("Steps")
                        .HasForeignKey("StepTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepType");
                });

            modelBuilder.Entity("workflow.Models.WorkFlowStepTypeButton", b =>
                {
                    b.HasOne("workflow.Models.Options", "ActionButton")
                        .WithMany("ActionButtons")
                        .HasForeignKey("ActionButtonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.WorkFlowStepType", "StepType")
                        .WithMany("StepsButtons")
                        .HasForeignKey("StepTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionButton");

                    b.Navigation("StepType");
                });

            modelBuilder.Entity("workflow.UserPreferences", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("UserPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.ApprovalLevel", b =>
                {
                    b.Navigation("ApprovalLevelDetails");
                });

            modelBuilder.Entity("workflow.Models.AspNetRoles", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUsersMenuPermission");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsers", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUsersLoginHistory");

                    b.Navigation("AspNetUsersPageVisited");

                    b.Navigation("AspNetUsersProfile");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("LockedRequestTypes");

                    b.Navigation("RequestTypeProcessOwners");

                    b.Navigation("UserOrganizationalStructures");

                    b.Navigation("UserPasswordPolicies");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenu", b =>
                {
                    b.Navigation("AspNetUsersMenuControl");

                    b.Navigation("AspNetUsersMenuPermission");

                    b.Navigation("InverseVParentMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuControl", b =>
                {
                    b.Navigation("AspNetUsersMenuPermissionControl");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermission", b =>
                {
                    b.Navigation("AspNetUsersMenuPermissionControl");
                });

            modelBuilder.Entity("workflow.Models.AuditTrail", b =>
                {
                    b.Navigation("AuditTrailDetails");
                });

            modelBuilder.Entity("workflow.Models.ComparisonOperator", b =>
                {
                    b.Navigation("ConditionDetails");
                });

            modelBuilder.Entity("workflow.Models.GeneralField", b =>
                {
                    b.Navigation("RequestForms");
                });

            modelBuilder.Entity("workflow.Models.Holiday", b =>
                {
                    b.Navigation("HolidayDates");
                });

            modelBuilder.Entity("workflow.Models.HolidayDate", b =>
                {
                    b.Navigation("HolidayAffectedOffices");
                });

            modelBuilder.Entity("workflow.Models.Options", b =>
                {
                    b.Navigation("ActionButtons");

                    b.Navigation("AspNetUsersMenuControl");

                    b.Navigation("ConditionSource");

                    b.Navigation("HolidayAffectedOffices");

                    b.Navigation("HolidayDates");

                    b.Navigation("Reasons");

                    b.Navigation("UserOffices");
                });

            modelBuilder.Entity("workflow.Models.OrganizationEntity", b =>
                {
                    b.Navigation("ApprovalLevel");

                    b.Navigation("OrganizationalStructures");
                });

            modelBuilder.Entity("workflow.Models.OrganizationalStructure", b =>
                {
                    b.Navigation("UserOrganizationalStructures");
                });

            modelBuilder.Entity("workflow.Models.RequestCategory", b =>
                {
                    b.Navigation("RequestTypes");
                });

            modelBuilder.Entity("workflow.Models.RequestStep", b =>
                {
                    b.Navigation("Assignees");

                    b.Navigation("Conditions");

                    b.Navigation("NextWorkFlows");

                    b.Navigation("WorkFlows");
                });

            modelBuilder.Entity("workflow.Models.RequestStepAssignee", b =>
                {
                    b.Navigation("RequestStepAssigneeDetails");
                });

            modelBuilder.Entity("workflow.Models.RequestStepCondition", b =>
                {
                    b.Navigation("ConditionDetails");
                });

            modelBuilder.Entity("workflow.Models.RequestType", b =>
                {
                    b.Navigation("LockedRequestType");

                    b.Navigation("RequestForms");

                    b.Navigation("RequestSteps");

                    b.Navigation("RequestTypeProcessOwners");
                });

            modelBuilder.Entity("workflow.Models.RequestTypeWorkFlow", b =>
                {
                    b.Navigation("WorkFlowParallel");
                });

            modelBuilder.Entity("workflow.Models.WorkFlowStep", b =>
                {
                    b.Navigation("RequestSteps");
                });

            modelBuilder.Entity("workflow.Models.WorkFlowStepType", b =>
                {
                    b.Navigation("Steps");

                    b.Navigation("StepsButtons");
                });
#pragma warning restore 612, 618
        }
    }
}
