// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using workflow.Models;

namespace workflow.Migrations
{
    [DbContext(typeof(FliDbContext))]
    [Migration("20220330061927_InitialDBSetup")]
    partial class InitialDBSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("workflow.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("workflow.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 81, DateTimeKind.Local).AddTicks(2592));

                    b.Property<string>("IndexPage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 86, DateTimeKind.Local).AddTicks(2710));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("BlockedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersLoginHistory", b =>
                {
                    b.Property<string>("VUlhid")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vULHId");

                    b.Property<DateTime>("DLogIn")
                        .HasColumnType("datetime")
                        .HasColumnName("dLogIn");

                    b.Property<DateTime?>("DLogOut")
                        .HasColumnType("datetime")
                        .HasColumnName("dLogOut");

                    b.Property<string>("NvIpaddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nvIPAddress");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("VUlhid");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsersLoginHistory");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenu", b =>
                {
                    b.Property<string>("VMenuId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuId");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 133, DateTimeKind.Local).AddTicks(7949));

                    b.Property<int>("ISerialNo")
                        .HasColumnType("int")
                        .HasColumnName("iSerialNo");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 133, DateTimeKind.Local).AddTicks(9973));

                    b.Property<string>("NvFabIcon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nvFabIcon");

                    b.Property<string>("NvMenuName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nvMenuName");

                    b.Property<string>("NvPageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nvPageUrl");

                    b.Property<string>("PrefixCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("VParentMenuId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vParentMenuId");

                    b.HasKey("VMenuId");

                    b.HasIndex("VParentMenuId");

                    b.ToTable("AspNetUsersMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuControl", b =>
                {
                    b.Property<string>("MenuControlId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("VMenuId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuId");

                    b.HasKey("MenuControlId");

                    b.HasIndex("OptionId");

                    b.HasIndex("VMenuId", "OptionId")
                        .IsUnique()
                        .HasDatabaseName("IX_AspNetUsersMenuControl");

                    b.ToTable("AspNetUsersMenuControl");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermission", b =>
                {
                    b.Property<string>("VMenuPermissionId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuPermissionId");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("VMenuId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuId");

                    b.HasKey("VMenuPermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("VMenuId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("IX_AspNetUsersMenuPermission");

                    b.ToTable("AspNetUsersMenuPermission");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermissionControl", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("MenuControlId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("VMenuPermissionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuPermissionId");

                    b.HasKey("Id");

                    b.HasIndex("MenuControlId");

                    b.HasIndex("VMenuPermissionId", "MenuControlId")
                        .IsUnique()
                        .HasDatabaseName("IX_AspNetUsersMenuPermissionControl");

                    b.ToTable("AspNetUsersMenuPermissionControl");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersPageVisited", b =>
                {
                    b.Property<string>("VPageVisitedId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vPageVisitedId");

                    b.Property<DateTime>("DDateVisited")
                        .HasColumnType("datetime")
                        .HasColumnName("dDateVisited");

                    b.Property<string>("NvIpaddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nvIPAddress");

                    b.Property<string>("NvPageName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("nvPageName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("VPageVisitedId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsersPageVisited");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Company")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Company");

                    b.Property<string>("Country")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Country");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 111, DateTimeKind.Local).AddTicks(3452));

                    b.Property<string>("Department")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Department");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MiddleName");

                    b.Property<string>("Mobile")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Mobile");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 111, DateTimeKind.Local).AddTicks(5005));

                    b.Property<string>("Phone")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Phone");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Photo");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Position");

                    b.Property<string>("Rank")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Rank");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsersProfile");
                });

            modelBuilder.Entity("workflow.Models.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentDetail")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 156, DateTimeKind.Local).AddTicks(7545));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OldContentDetail")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("VMenuId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("vMenuId");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("workflow.Models.Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 160, DateTimeKind.Local).AddTicks(9027));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 161, DateTimeKind.Local).AddTicks(315));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OptionGroup")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("workflow.Models.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByPK")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 163, DateTimeKind.Local).AddTicks(2754));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ModifiedByPK")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2022, 3, 30, 14, 19, 27, 163, DateTimeKind.Local).AddTicks(4111));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("workflow.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VSettingGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VSettingGroup");

                    b.Property<string>("VSettingId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("VSettingId");

                    b.Property<string>("VSettingLabel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VSettingLabel");

                    b.Property<string>("VSettingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("VSettingName");

                    b.Property<string>("VSettingOption")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("VSettingOption");

                    b.HasKey("Id");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("workflow.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("workflow.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("workflow.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersLoginHistory", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "IdNavigation")
                        .WithMany("AspNetUsersLoginHistory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUsersLoginHistory_AspNetUsers")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenu", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsersMenu", "VParentMenu")
                        .WithMany("InverseVParentMenu")
                        .HasForeignKey("VParentMenuId")
                        .HasConstraintName("FK_AspNetUsersMenu_AspNetUsersMenu");

                    b.Navigation("VParentMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuControl", b =>
                {
                    b.HasOne("workflow.Models.Options", "Option")
                        .WithMany("AspNetUsersMenuControl")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_AspNetUsersMenuContol_Options")
                        .IsRequired();

                    b.HasOne("workflow.Models.AspNetUsersMenu", "VMenu")
                        .WithMany("AspNetUsersMenuControl")
                        .HasForeignKey("VMenuId")
                        .HasConstraintName("FK_AspNetUsersMenuControl_AspNetUsersMenu")
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("VMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermission", b =>
                {
                    b.HasOne("workflow.Models.AspNetRoles", "IdNavigation")
                        .WithMany("AspNetUsersMenuPermission")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUsersMenuPermission_AspNetRoles")
                        .IsRequired();

                    b.HasOne("workflow.Models.AspNetUsersMenu", "VMenu")
                        .WithMany("AspNetUsersMenuPermission")
                        .HasForeignKey("VMenuId")
                        .HasConstraintName("FK_AspNetUsersMenuPermission_AspNetUsersMenu")
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("VMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermissionControl", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsersMenuControl", "MenuControl")
                        .WithMany("AspNetUsersMenuPermissionControl")
                        .HasForeignKey("MenuControlId")
                        .HasConstraintName("FK_AspNetUsersMenuPermissionContol_AspNetUsersMenuControl")
                        .IsRequired();

                    b.HasOne("workflow.Models.AspNetUsersMenuPermission", "MenuPermission")
                        .WithMany("AspNetUsersMenuPermissionControl")
                        .HasForeignKey("VMenuPermissionId")
                        .HasConstraintName("FK_AspNetUsersMenuPermissionControl_AspNetUsersMenuPermission")
                        .IsRequired();

                    b.Navigation("MenuControl");

                    b.Navigation("MenuPermission");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersPageVisited", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "IdNavigation")
                        .WithMany("AspNetUsersPageVisited")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUsersPageVisited_AspNetUsers")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersProfile", b =>
                {
                    b.HasOne("workflow.Models.AspNetUsers", "IdNavigation")
                        .WithOne("AspNetUsersProfile")
                        .HasForeignKey("workflow.Models.AspNetUsersProfile", "Id")
                        .HasConstraintName("FK_AspNetUsersProfile_AspNetUsers")
                        .IsRequired();

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("workflow.Models.AspNetRoles", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUsersMenuPermission");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsers", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUsersLoginHistory");

                    b.Navigation("AspNetUsersPageVisited");

                    b.Navigation("AspNetUsersProfile");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenu", b =>
                {
                    b.Navigation("AspNetUsersMenuControl");

                    b.Navigation("AspNetUsersMenuPermission");

                    b.Navigation("InverseVParentMenu");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuControl", b =>
                {
                    b.Navigation("AspNetUsersMenuPermissionControl");
                });

            modelBuilder.Entity("workflow.Models.AspNetUsersMenuPermission", b =>
                {
                    b.Navigation("AspNetUsersMenuPermissionControl");
                });

            modelBuilder.Entity("workflow.Models.Options", b =>
                {
                    b.Navigation("AspNetUsersMenuControl");
                });
#pragma warning restore 612, 618
        }
    }
}
